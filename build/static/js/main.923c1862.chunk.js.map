{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","action","v1","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","newTasks","task","find","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.923c1862.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nconst initialState: TodolistType[]= []\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}\r\n","import {FilterValuesType, TasksStateType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType;\r\n\r\nconst initialState: TasksStateType = {}\r\nexport const tasksReducer = (state: TasksStateType = initialState , action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state};\r\n\r\n            let tasks = stateCopy[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state};\r\n\r\n            let tasks = stateCopy[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n\r\n            stateCopy[action.todolistId] = [];\r\n\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   isDone: boolean,\r\n                                   todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string,\r\n                                  title: string,\r\n                                  todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    // let [todolists, dispatchToTodolists] = useState<Array<TodolistType>>([\r\n    //     {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    //     {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    // ])\r\n    //\r\n    // let [tasks, dispatchToTasks] = useState<TasksStateType>({\r\n    //     [todolistId1]: [\r\n    //         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //         {id: v1(), title: \"JS\", isDone: true}\r\n    //     ],\r\n    //     [todolistId2]: [\r\n    //         {id: v1(), title: \"Milk\", isDone: true},\r\n    //         {id: v1(), title: \"React Book\", isDone: true}\r\n    //     ]\r\n    // });\r\n    const todolists = useSelector<AppRootStateType,TodolistType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        dispatch(removeTodolistAC(id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\nimport {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}